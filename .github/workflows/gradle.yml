# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build and Deploy docker container to oracle cloud ubuntu server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: docker image build
        run: ./gradlew build
      - name: docker Build
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}} .
      - name: docker Push
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: deploy and run docker container
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{secrets.SERVER_HOST}}
          username: opc
          key: ${{secrets.SERVER_PASSWORD}}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            if [ "$(docker ps -al)" ]; then
            sudo docker rm -f $(docker ps -qa)
            fi
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}
            sudo docker run -d --name freight_latest -p 3000:3000 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}


#  deploy:
#    needs :
#    runs-on: ubuntu-latest
#    steps:
#      - name: deploy and run docker container
#        uses: appleboy/ssh-action@v0.1.4
#        with:
#          host: ${{secrets.SERVER_HOST}}
#          username: opc
#          key: ${{secrets.SERVER_PASSWORD}}
#          port: ${{ secrets.SERVER_SSH_PORT }}
#          script: |
#            cd /app/freight
##            sudo git reset --hard origin/main
##            sudo git pull origin master
#            sudo docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}} .
#            sudo docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}
#
#            if [ "$(docker ps -q)" ]; then
#              sudo docker rm -f $(docker ps -qa)
#            fi
#            sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}
#            sudo docker run -d --name freight_latest -p 3000:3000 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}
##            sudo docker system prune -f
            
      
