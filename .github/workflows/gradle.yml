# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build and Deploy docker container to oracle cloud ubuntu server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build with Gradle
        run: |
          ./gradlew build

  login-docker-hub:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  docker-builder:
    needs: login-docker-hub
    runs-on: ubuntu-latest
    steps:
      - name: build docker image
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{secrets.SERVER_HOST}}
          username: opc
          key: ${{secrets.SERVER_PASSWORD}}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd /app/freight
            git reset --hard origin/main
            git pull origin main
            sudo docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}} .
            sudo docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}
            
          

  deploy:
    needs : docker-builder
    runs-on: ubuntu-latest
    steps:
      - name: deploy docker image
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{secrets.SERVER_HOST}}
          username: opc
          key: ${{secrets.SERVER_PASSWORD}}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            if [ "$(docker ps -q)" ]; then
              sudo docker rm -f $(docker ps -qa)
            fi
            sudo docker run -d --name freight_latest -p 3000:3000 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}} 
            sudo docker system prune -f
            
      
